{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT6, False)\nright_drive_smart = Motor(Ports.PORT10, True)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 259.34, 320, 40, MM, 1)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n\n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------------------------------------------\n#\n#    Project:Basebot \n#    Description:\n#    Configuration:  EXP BaseBot (Drivetrain 2-motor, Inertial)\n#\n# ------------------------------------------------------------------------------\n# Library imports\nfrom vex import *\n# Begin project code\n\ndrivetrain.set_drive_velocity(75, PERCENT)\ndrivetrain.drive_for(FORWARD, 440, MM)\n#These are the cones\ndrivetrain.drive_for(FORWARD, 70, MM)\ndrivetrain.drive_for(RIGHT,15, DEGREES)\ndrivetrain.drive_for(FORWARD, 20, MM)\ndrivetrain.drive_for(LEFT, 15, DEGREES)\ndrivetrain.drive_for(FORWARD, 250, MM)\n# This is for going to the walls and turning for the walls\ndrivetrain.drive_for(FORWARD, 360, MM)\ndrivetrain.drive_for(RIGHT 90, DEGREES)\ndrivetrain.drive_for(FORWARD, 210, MM)\ndrivetrain.drive_for(RIGHT 90, DEGREES)\n# This is the tunnel\ndrivetrain.drive_for(FORWARD, 210, MM)\n# This is the seesaw\ndrivetrain.set_drive_velocity(50, PERCENT)\ndrivetrain.drive_for(FORWARD, 440, MM)\ndrivetrain.drive_for(RIGHT 90, DEGREES)\n# This is for the ending ramp\ndrivetrain.set_drive_velocity(75, PERCENT)\ndrivetrain.drive_for(FORWARD, 440, MM)\n# This is the end\ndrivetrain.set_stopping(BRAKE)\n\n\n\n\n","textLanguage":"python","robotConfig":[{"port":[6,10,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel325in","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null}],"slot":0,"platform":"EXP","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"4.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}